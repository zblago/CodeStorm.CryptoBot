// <auto-generated />
using System;
using CodeStorm.CryptoTrader.Repository.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeStorm.CryptoTrader.Repository.Migrations
{
    [DbContext(typeof(CryptoTraderDbContext))]
    partial class CryptoTraderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataFetcher.Repository.Ohlc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Close")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CryptoCurrencyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("High")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<decimal>("LatestRsi")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Low")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<decimal>("Open")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<int>("TimeStampInteger")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("VWap")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<decimal>("Volume")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.HasKey("Id");

                    b.ToTable("Ohlc");
                });

            modelBuilder.Entity("DataFetcher.Repository.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Response");
                });

            modelBuilder.Entity("DataFetcher.Repository.TimelineAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CryptoCurrencyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("D")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("K")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("LatestRsi")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("TimelineAnalysis");
                });
#pragma warning restore 612, 618
        }
    }
}
